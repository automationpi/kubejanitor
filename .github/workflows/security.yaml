name: Security

on:
  schedule:
    - cron: '0 6 * * 1'  # Weekly on Monday at 6 AM UTC
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  actions: read
  contents: read
  security-events: write
  pull-requests: read

jobs:
  dependency-scan:
    name: Dependency Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Run Go vulnerability scan
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

    - name: Run Nancy (Go dependency scanner)
      run: |
        go list -json -deps ./... | docker run --rm -i sonatypecommunity/nancy:latest sleuth

  code-scan:
    name: Code Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: go

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  secret-scan:
    name: Secret Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified
      if: github.event_name == 'push' && github.ref != format('refs/heads/{0}', github.event.repository.default_branch)

  container-scan:
    name: Container Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule'
    permissions:
      security-events: write
      contents: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build image
      run: docker build -t kubejanitor:test .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'kubejanitor:test'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && github.event_name != 'pull_request'
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Trivy in table format
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'kubejanitor:test'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

  helm-security:
    name: Helm Security
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v3

    - name: Install helm-docs
      run: |
        cd /tmp
        wget https://github.com/norwoodj/helm-docs/releases/download/v1.11.0/helm-docs_1.11.0_Linux_x86_64.tar.gz
        tar -xzf helm-docs_1.11.0_Linux_x86_64.tar.gz
        sudo mv helm-docs /usr/local/bin/

    - name: Run helm security checks
      run: |
        # Install datree using direct download
        wget -O datree https://github.com/datreeio/datree/releases/latest/download/datree-cli_linux_x86_64
        chmod +x datree
        sudo mv datree /usr/local/bin/
        
        # Check Helm chart for security issues
        helm template kubejanitor helm-charts/kubejanitor-operator > /tmp/kubejanitor-manifests.yaml
        datree test /tmp/kubejanitor-manifests.yaml || echo "Datree scan completed with findings"

  k8s-security:
    name: Kubernetes Security
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run kubesec scan
      run: |
        # Install kubesec
        wget https://github.com/controlplaneio/kubesec/releases/download/v2.13.0/kubesec_linux_amd64.tar.gz
        tar -xzf kubesec_linux_amd64.tar.gz
        sudo mv kubesec /usr/local/bin/
        
        # Generate manifests and scan
        helm template kubejanitor helm-charts/kubejanitor-operator > /tmp/kubejanitor-manifests.yaml
        kubesec scan /tmp/kubejanitor-manifests.yaml

    - name: Run Polaris
      run: |
        # Install Polaris
        wget https://github.com/FairwindsOps/polaris/releases/download/8.0.0/polaris_linux_amd64.tar.gz
        tar -xzf polaris_linux_amd64.tar.gz
        sudo mv polaris /usr/local/bin/
        
        # Audit manifests
        helm template kubejanitor helm-charts/kubejanitor-operator > /tmp/kubejanitor-manifests.yaml
        polaris audit --audit-path /tmp/kubejanitor-manifests.yaml --format=pretty

  sbom-generation:
    name: SBOM Generation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Install Syft
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

    - name: Generate SBOM
      run: |
        syft packages dir:. -o spdx-json=sbom.spdx.json
        syft packages dir:. -o cyclonedx-json=sbom.cyclonedx.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: |
          sbom.spdx.json
          sbom.cyclonedx.json

  license-check:
    name: License Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Install go-licenses
      run: go install github.com/google/go-licenses@latest

    - name: Check licenses
      run: |
        go-licenses check ./...
        go-licenses report ./... > licenses.txt

    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: licenses
        path: licenses.txt