name: Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.23'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-url: ${{ steps.build.outputs.image-url }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Log in to Container Registry
      uses: docker/login-action@v4
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v6
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v4

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  test-image:
    name: Test Image
    runs-on: ubuntu-latest
    needs: [build-and-push]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3

    - name: Create kind cluster
      uses: helm/kind-action@v1.10.0
      with:
        cluster_name: release-test

    - name: Test Helm chart with new image
      run: |
        # Extract tag from GITHUB_REF
        TAG=${GITHUB_REF#refs/tags/}
        
        # Install using Helm
        helm upgrade --install kubejanitor-test ./helm-charts/kubejanitor-operator \
          --namespace kubejanitor-system \
          --create-namespace \
          --set image.tag=${TAG} \
          --set dryRun=true \
          --wait

        # Verify deployment
        kubectl get pods -n kubejanitor-system
        kubectl wait --for=condition=Ready pods -l app.kubernetes.io/name=kubejanitor-operator -n kubejanitor-system --timeout=300s

  release-helm:
    name: Release Helm Chart
    runs-on: ubuntu-latest
    needs: [test-image]
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Configure Git
      run: |
        git config user.name "$GITHUB_ACTOR"
        git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.3'

    - name: Update chart version
      run: |
        TAG=${GITHUB_REF#refs/tags/v}
        sed -i "s/version: .*/version: ${TAG}/" helm-charts/kubejanitor-operator/Chart.yaml
        sed -i "s/appVersion: .*/appVersion: \"${TAG}\"/" helm-charts/kubejanitor-operator/Chart.yaml

    - name: Package Helm chart
      run: |
        helm package helm-charts/kubejanitor-operator

    - name: Run chart-releaser
      uses: helm/chart-releaser-action@v1.6.0
      env:
        CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      with:
        charts_dir: helm-charts

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-and-push, test-image]
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v6
      with:
        distribution: goreleaser
        version: latest
        args: release --clean
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [create-release]
    permissions:
      contents: write
      pull-requests: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update installation docs
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        
        # Update README with new version
        sed -i "s/kubejanitor:[^[:space:]]*/kubejanitor:${TAG}/g" README.md
        sed -i "s/version: [0-9]\+\.[0-9]\+\.[0-9]\+/version: ${TAG#v}/g" README.md
        
        # Update docs
        find docs -name "*.md" -type f -exec sed -i "s/kubejanitor:[^[:space:]]*/kubejanitor:${TAG}/g" {} +

    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v7
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "docs: update version references to ${{ github.ref_name }}"
        title: "Update documentation for release ${{ github.ref_name }}"
        body: |
          Automated update of version references in documentation following release ${{ github.ref_name }}.
          
          Changes:
          - Updated image tags in README.md
          - Updated version references in documentation
          
          This PR was automatically created by the release workflow.
        branch: update-docs-${{ github.ref_name }}
        delete-branch: true

  security-scan-image:
    name: Security Scan Image
    runs-on: ubuntu-latest
    needs: [build-and-push]
    permissions:
      security-events: write
      contents: read
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-and-push.outputs.image-url }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [create-release, release-helm]
    if: always()
    steps:
    - name: Notify success
      if: needs.create-release.result == 'success' && needs.release-helm.result == 'success'
      run: |
        echo "‚úÖ Release ${{ github.ref_name }} completed successfully!"
        echo "üê≥ Container image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
        echo "üì¶ Helm chart: Available in GitHub Releases"

    - name: Notify failure
      if: needs.create-release.result == 'failure' || needs.release-helm.result == 'failure'
      run: |
        echo "‚ùå Release ${{ github.ref_name }} failed!"
        echo "Please check the workflow logs for details."
        exit 1